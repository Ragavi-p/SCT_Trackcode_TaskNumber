<!-- Main Heading -->
<h1>Tic Tac Toe</h1>

<!-- Game Board: 3x3 grid with 9 clickable cells -->
<div class="board" id="board">
  <div class="cell" data-index="0"></div>
  <div class="cell" data-index="1"></div>
  <div class="cell" data-index="2"></div>
  <div class="cell" data-index="3"></div>
  <div class="cell" data-index="4"></div>
  <div class="cell" data-index="5"></div>
  <div class="cell" data-index="6"></div>
  <div class="cell" data-index="7"></div>
  <div class="cell" data-index="8"></div>
</div>

<!-- Status message: shows which player's turn or who won -->
<div class="status" id="status">Player X's Turn</div>

<!-- Restart button -->
<button class="btn" onclick="restartGame()">Restart</button>
/* Whole page styling */
body {
  background-color: #121212; /* Dark background */
  font-family: 'Poppins', sans-serif;
  color: #E0E0E0; /* Soft white text */
  text-align: center;
  padding: 40px;
}

/* Title styling */
h1 {
  font-size: 2.5rem;
  color: #00FFF5; /* Neon cyan */
}

/* 3x3 Game Board layout */
.board {
  display: grid;
  grid-template-columns: repeat(3, 100px); /* 3 columns */
  gap: 15px;
  justify-content: center;
  margin: 30px auto;
}

/* Individual cells (squares) */
.cell {
  width: 100px;
  height: 100px;
  font-size: 2.5rem;
  background-color: #1F1F1F;
  border-radius: 15px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: 0.3s;
}

/* Hover glow */
.cell:hover {
  box-shadow: 0 0 10px #00fff5;
}

/* Color coding for X and O */
.cell.x { color: #00FFF5; }     /* X = Neon Cyan */
.cell.o { color: #FF4EDD; }     /* O = Neon Pink */

/* Winning cells highlight */
.cell.winner {
  background-color: #FFFC00;
  color: #000;
  box-shadow: 0 0 20px #FFFC00;
}

/* Status message */
.status {
  font-size: 1.5rem;
  color: #FFFC00;
}

/* Restart button style */
.btn {
  margin-top: 20px;
  padding: 12px 30px;
  background: transparent;
  border: 2px solid #00FFF5;
  color: white;
  border-radius: 12px;
  cursor: pointer;
}

.btn:hover {
  background-color: #00FFF5;
  color: #121212;
}
// Get all cell elements, board and status display
const board = document.getElementById("board");
const cells = document.querySelectorAll(".cell");
const status = document.getElementById("status");

let currentPlayer = "X"; // Current player
let gameActive = true;   // Track if game is still going

// All possible winning combinations (index positions)
const winningCombos = [
  [0,1,2], [3,4,5], [6,7,8], // rows
  [0,3,6], [1,4,7], [2,5,8], // columns
  [0,4,8], [2,4,6]           // diagonals
];

// When a cell is clicked
function handleClick(e) {
  const cell = e.target;
  const index = cell.getAttribute("data-index");

  // Ignore if already filled or game over
  if (!gameActive || cell.textContent !== "") return;

  // Mark the cell with current player's symbol
  cell.textContent = currentPlayer;
  cell.classList.add(currentPlayer.toLowerCase()); // Add class "x" or "o"

  if (checkWin()) {
    // Someone won
    status.textContent = `🎉 Player ${currentPlayer} Wins!`;
    gameActive = false;
  } else if (isDraw()) {
    // All cells filled but no winner
    status.textContent = "🤝 It's a Draw!";
    gameActive = false;
  } else {
    // Switch players
    currentPlayer = currentPlayer === "X" ? "O" : "X";
    status.textContent = `Player ${currentPlayer}'s Turn`;
  }
}

// Check if there's a winner
function checkWin() {
  return winningCombos.some(combo => {
    const [a, b, c] = combo;
    if (
      cells[a].textContent &&
      cells[a].textContent === cells[b].textContent &&
      cells[a].textContent === cells[c].textContent
    ) {
      // Highlight winning cells
      cells[a].classList.add("winner");
      cells[b].classList.add("winner");
      cells[c].classList.add("winner");
      return true;
    }
    return false;
  });
}

// Check if it's a draw (no empty cells)
function isDraw() {
  return [...cells].every(cell => cell.textContent !== "");
}

// Restart the game
function restartGame() {
  cells.forEach(cell => {
    cell.textContent = "";
    cell.className = "cell"; // Reset all styles
  });
  currentPlayer = "X";
  gameActive = true;
  status.textContent = "Player X's Turn";
}

// Add click event to each cell
cells.forEach(cell => cell.addEventListener("click", handleClick));
